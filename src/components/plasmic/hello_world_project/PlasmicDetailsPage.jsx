// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dGsUhjZME7GZHL9mJLmwh9
// Component: ZH_y0uWWc-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: -YA3oXbgpP1/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_hello_world_project.module.css"; // plasmic-import: dGsUhjZME7GZHL9mJLmwh9/projectcss
import sty from "./PlasmicDetailsPage.module.css"; // plasmic-import: ZH_y0uWWc-/css

export const PlasmicDetailsPage__VariantProps = new Array();

export const PlasmicDetailsPage__ArgProps = new Array();

function PlasmicDetailsPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            link={`/`}
          />

          <DataFetcher
            data-plasmic-name={"httpApiFetcher"}
            data-plasmic-override={overrides.httpApiFetcher}
            className={classNames("__wab_instance", sty.httpApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <ph.DataCtxReader>
                {$ctx =>
                  (() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "Error fetching data";
                      }
                      throw e;
                    }
                  })()
                }
              </ph.DataCtxReader>
            }
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
            }
            method={"GET"}
            noLayout={false}
            url={(() => {
              try {
                return "https://dummyjson.com/products/" + $ctx.params.id;
              } catch (e) {
                if (e instanceof TypeError) {
                  return "";
                }
                throw e;
              }
            })()}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.thumbnail;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              )}
            </ph.DataCtxReader>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "button", "httpApiFetcher", "img"],
  button: ["button"],
  httpApiFetcher: ["httpApiFetcher", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDetailsPage__ArgProps,
          internalVariantPropNames: PlasmicDetailsPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDetailsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetailsPage";
  } else {
    func.displayName = `PlasmicDetailsPage.${nodeName}`;
  }
  return func;
}

export const PlasmicDetailsPage = Object.assign(
  // Top-level PlasmicDetailsPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicDetailsPage
    internalVariantProps: PlasmicDetailsPage__VariantProps,
    internalArgProps: PlasmicDetailsPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDetailsPage;
/* prettier-ignore-end */
